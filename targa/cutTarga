#cut targa75*16

{
 "cells": [
  {
   "cell_type": "raw",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "ename": "FileExistsError",
     "evalue": "[Errno 17] File exists: '/host/Can/targa/targaTest/outPut/train/A'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileExistsError\u001b[0m                           Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-e3c6de12b53e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstring\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mascii_uppercase\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;31m#build 26 alphbet\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mmkpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"/host/Can/targa/targaTest/outPut/train/\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmkdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmkpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0mmkpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"/host/Can/targa/targaTest/outPut/val/\"\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmkdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmkpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileExistsError\u001b[0m: [Errno 17] File exists: '/host/Can/targa/targaTest/outPut/train/A'"
     ]
    }
   ],
   "source": [
    "\n",
    "import os  \n",
    "import string\n",
    "\n",
    "path = '/host/Can/targa/targaTest/'  \n",
    "ft=open('/host/Can/targa/targaTest/outPut/train.txt','a+')\n",
    "fv=open('/host/Can/targa/targaTest/outPut/val.txt','a+')\n",
    "\n",
    "\n",
    "for i in string.ascii_uppercase:#build 26 alphbet\n",
    "    mkpath=\"/host/Can/targa/targaTest/outPut/train/\"+i\n",
    "    os.mkdir(mkpath)\n",
    "    mkpath=\"/host/Can/targa/targaTest/outPut/val/\"+i\n",
    "    os.mkdir(mkpath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(10):#build directories 1- 10\n",
    "    mkpath=\"/host/Can/targa/targaTest/outPut/train/\"+str(i)\n",
    "    os.mkdir(mkpath)\n",
    "    mkpath=\"/host/Can/targa/targaTest/outPut/val/\"+str(i)\n",
    "    os.mkdir(mkpath)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def charToNum(c):\n",
    "    if(ord(c) < ord('A')):\n",
    "        return c\n",
    "    else:\n",
    "        return str(ord(c)-ord('A') + 10)\n",
    "\n",
    "fs = os.listdir(path)\n",
    "b = 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "for f in fs:\n",
    "    b = b+1\n",
    "    if f == 'outPut':\n",
    "        continue\n",
    "    tmp_path = os.path.join(path,f)\n",
    "    Img = Image.open(tmp_path)\n",
    "    out = 'train/'\n",
    "    if b % 6 == 0:\n",
    "        out = 'val/'\n",
    "    x = [9,16,28,36,44,52,59]\n",
    "    a = 0;\n",
    "    for i in x:\n",
    "        box = (i,0,i+8,16)\n",
    "        region = Img.crop(box)\n",
    "        name = '/host/Can/targa/targaTest/outPut/' + out + f[a] + '/' + f[a] + '_'+ f\n",
    "        if b % 6 == 0:\n",
    "            fv.write(f[a] + '/' + f[a] + '_'+ f + ' ' + charToNum(f[a]) + '\\n')\n",
    "        else:\n",
    "            ft.write(f[a] + '/' + f[a] + '_'+ f + ' ' + charToNum(f[a]) + '\\n')\n",
    "        \n",
    "        a = a+1\n",
    "        region.save(name)\n",
    "        i+=8\n",
    "        print(a)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
